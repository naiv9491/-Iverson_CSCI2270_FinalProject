The public methods:

1. Read in text file:
        Function Prototype:
        void readIn(std::string location, int nature, int food, int culture, int nightLife, int adventure, int relax); 
        
        Function Description:
        This method is implemented when we read in the text file of locations. As one line at a time is read in, this method is called 
        and takes in the strings and integers found within each line of the text file and stores these  values to a node, 
        which is then stored in a linked list.
        
        Input:
        The components of each line in the text file (whether strings or integers).
        
        Output:
        No output. However a linked list will have been created after calling this function for every line in the text file.
        
        Precondition:
        The text file.
        
        Postcondition:
        A linked list of all locations in the text file (each location is a struct with all of the integer values related to the location's ranking).
        
2. Display menu:
        Function Prototype:
        void displayMenu();
        
        Function Description:
        This method displays a second menu that the user calls when they choose option 1. It will ask the user to rank
        what they want to see on their trip from 1 to 10 (10 being they really want to see it). The categories consist of 
        nature, food, culuter, night life, adventure, and relax.
        
        Input:
        No input
        
        Output:
        No output other than cout statements with the menu.
        
        Precondition:
        None
        
        Postcondition
        None
        
        
3. Display places:        
        Function Prototype:
        void displayPlaces();
        
        Function Description:
        This method simply prints out the linked list of locations.
        
        Input:
        Requires no input
        
        Output:
        No output, however this method couts all of the locations in the linked list
        
        Precondition:
        Need to define the pointer called "user" in the header file.
        
        Postcondition:
        Only cout statements are produced from this function.
        
4. Reverse places:    
        Function Prototype:
        void reversePlaces();
        
        Function Description:
        This method reverses the linked list of locations.
        
        Input:
        No input required.
        
        Output:
        The linked list in reverse order.
        
        Precondition:
        Need to define the pointer called "placeNode" in the header file.
        
        Postcondition:
        Simply a reversed linked list.
        
5. Add place:
        Function Prototype:
        void addPlace();
        
        Function Description:
        This method asks the user to input a new location and rank it. The the function will add the location to the linked list of locations.
        
        Input:
        No required inputs directly, however once within the function the user will be asked to provide the name and rankings of a location to add to the linked list.
        
        Output:
        A linked list with the new location added.
        
        Precondition:
        A linked list to add a new location to.
        
        Postcondition:
        The linked list with a new location added to it that includes rankings.
        
6. Remove place:      
        Function Prototype:
        void removePlace();
        
        Function Description:
        This method asks the user what location they wish to remove from the linked list.
        
        Input:
        No required inputs directly, however once within the function the user will be asked to provide the name of a location to delete from the linked list.
        
        Output:
        The linked list with a deleted locaiton.
        
        Precondition:
        A linked list to remove location from.
        
        Postcondition:
        A linked list with one location removed.
        
7. Compute Place Score:        
        Function Prototype:
        void computePlaceScores();
        
        Function Description:
        This method takes the user's rankings that were obtained when they called the displayMenu function and computes a score 
        that produces the best locations that the user should visit.
        
        Input:
        No direct input, however once within the function the user will be asked to rank their interests. The function will
        use these values to calculate the best locations for the user to visit.
        
        Output:
        The best locations for user to visit.
        
        Precondition:
        Need to have the linked list of cities and scores head in and accessed through head instance variable, and after 
        choosing best cities choice in main menu the user will have to enter their preferences for travel.  When they enter
        their preferences a user instance variable will be given the data.
        
        Postcondition:
        a user is created, and their best places will be given in a cout statement
        
8. Sort Place Score:
        Function Prototype:
        void sortPlaceScores();
        
        Function Description:
        This method takes the computed scores from the method above and sorts the linked list of locations to display the 
        top ranked locations for the user to visit in order from best to worst. The method calls either the insertion sort algorithm 
        or the quick sort algorithm to sort the linked list.
        
        Input: no parameters but it needs accesss to the head of the cities linked list.
        
        Output:it sorts the cityScore values for each city in the linked list and couts the top 10
        
        Precondition: the cities need top be in the linked list and the user needs to have been created.
        
        Postcondition: the linked list will remain in the same order, and the local array of sortInfo
        structs will be destroyed.
        
9. Insertion sort:
        Function Prototype:
        void insertionSortValues(int sizeOfArray, sortInfo *firstElementofArray);
        
        Function Description:
        The insertion sort method takes in the size of the array and the first pointer in that array.
        
        Input: takes two parameters,the size of an array and a pointer to the first element
        
        Output:sorts the given array in ascending order
        
        Precondition:you will need the array of sortInfo structs that will have been created by the calling function, 
        sortPlaceScores
        
        Postcondition:it changes the order of the array scoreArr, which is then used to cout the top 10 cities in 
        sortPlaceScores
        
10. Quick sort:        
        Function Prototype:
        void quickSortValues(sortInfo *arr, int leftIndex, int rightIndex);
        
        Function Description:
        The quick sort method takes in a pointer of the struct called sortInfo and two integers (left and rightmost indices of an array created 
        in the sortPlaceScores method that contains the scores of each location).
        
        Input:It takes three parameters, a pointer to the first element of the array, the first element index, and the last element index
        
        Output: It sorts scoreArr in ascending order to be used in sortPlaceScores function
        
        Precondition: it will need an array of sortInfo structs to be created in the callling function
        
        Postcondition: the calling functioin will cout the top 10 citites from the sorted scoreArr array
